version: '3.8'

services:
  # ===========================================
  # DATABASE SERVICES
  # ===========================================
  
  mysql:
    image: mysql:8.0
    container_name: healthcare_mysql
    environment:
      MYSQL_ROOT_PASSWORD: hvxk2003
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - healthcare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:alpine
    container_name: healthcare_redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - healthcare-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # API GATEWAY (ENTRY POINT)
  # ===========================================
  
  api-gateway:
    build: 
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: healthcare_gateway
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # CORE MICROSERVICES
  # ===========================================

  user-service:
    build: 
      context: ./user_service
      dockerfile: Dockerfile
    container_name: healthcare_user_service
    ports:
      - "8001:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8001
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  patient-service:
    build: 
      context: ./patient_service
      dockerfile: Dockerfile
    container_name: healthcare_patient_service
    ports:
      - "8002:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8002
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  doctor-service:
    build: 
      context: ./doctor_service
      dockerfile: Dockerfile
    container_name: healthcare_doctor_service
    ports:
      - "8003:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8003
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  nurse-service:
    build: 
      context: ./nurse_service
      dockerfile: Dockerfile
    container_name: healthcare_nurse_service
    ports:
      - "8004:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8004
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  appointment-service:
    build: 
      context: ./appointment_service
      dockerfile: Dockerfile
    container_name: healthcare_appointment_service
    ports:
      - "8005:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8005
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  health-record-service:
    build: 
      context: ./health_record_service
      dockerfile: Dockerfile
    container_name: healthcare_health_record_service
    ports:
      - "8006:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8006
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  medication-service:
    build: 
      context: ./medication_service
      dockerfile: Dockerfile
    container_name: healthcare_medication_service
    ports:
      - "8007:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8007
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  laboratory-service:
    build: 
      context: ./laboratory_service
      dockerfile: Dockerfile
    container_name: healthcare_laboratory_service
    ports:
      - "8008:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8008
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  pharmacy-service:
    build: 
      context: ./pharmacy_service
      dockerfile: Dockerfile
    container_name: healthcare_pharmacy_service
    ports:
      - "8009:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8009
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  invoice-service:
    build: 
      context: ./invoice_service
      dockerfile: Dockerfile
    container_name: healthcare_invoice_service
    ports:
      - "8010:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8010
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  payment-service:
    build: 
      context: ./payment_service
      dockerfile: Dockerfile
    container_name: healthcare_payment_service
    ports:
      - "8011:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8011
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  notification-service:
    build: 
      context: ./notification_service
      dockerfile: Dockerfile
    container_name: healthcare_notification_service
    ports:
      - "8012:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8012
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  insurance-service:
    build: 
      context: ./insurance_service
      dockerfile: Dockerfile
    container_name: healthcare_insurance_service
    ports:
      - "8013:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8013
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  chatbot-service:
    build: 
      context: ./chatbot_service
      dockerfile: Dockerfile
    container_name: healthcare_chatbot_service
    ports:
      - "8014:8000"
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - DEBUG=True
      - SERVICE_PORT=8014
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - logs:/app/logs

  # ===========================================
  # LOAD BALANCER (OPTIONAL)
  # ===========================================
  
  nginx:
    image: nginx:alpine
    container_name: healthcare_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - healthcare-network
    restart: unless-stopped

  # ===========================================
  # MONITORING & LOGGING (OPTIONAL)
  # ===========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - healthcare-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: healthcare_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healthcare-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: healthcare_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - healthcare-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: healthcare_logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - logs:/usr/share/logstash/logs
    ports:
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - healthcare-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: healthcare_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - healthcare-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: healthcare_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - healthcare-network
    restart: unless-stopped

  # ===========================================
  # MESSAGE QUEUE (OPTIONAL)
  # ===========================================

  rabbitmq:
    image: rabbitmq:3-management
    container_name: healthcare_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - healthcare-network
    restart: unless-stopped

  # ===========================================
  # FRONTEND APPLICATION
  # ===========================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthcare_frontend
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - healthcare-network
    restart: unless-stopped
    volumes:
      - ./frontend:/usr/share/nginx/html

# ===========================================
# NETWORKS
# ===========================================

networks:
  healthcare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# VOLUMES
# ===========================================

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  logs:
    driver: local
  uploads:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local